# Instructions for Disconnecting and Reconnecting to the Project

This guide provides clear steps to disconnect from the project's services and environment and how to properly reconnect. Use this if you need to reset your session or ensure you are in a clean state.

---
### Step 1: Deactivate and Reactivate the Python Virtual Environment
---

This project uses a virtual environment (`venv`) to manage its Python dependencies.

**To Deactivate:**

1.  Simply run the following command in your terminal. You will know it worked if you no longer see `(venv)` at the beginning of your terminal prompt.
    ```bash
    deactivate
    ```

**To Reactivate:**

1.  Make sure you are in the project's root directory (`/Users/shabhrishreddyuddehal/Downloads/CurserProjects/ML-Ops-XGBoost`).
2.  Run the following command to activate the environment. You should see `(venv)` appear at the start of your terminal prompt.
    ```bash
    source venv/bin/activate
    ```

---
### Step 2: Verify Your Git Remote Connection
---

This ensures your local project is correctly linked to your GitHub repository.

1.  To see your current remote connection, run:
    ```bash
    git remote -v
    ```

2.  You should see output that looks like this, pointing to your repository:
    ```
    origin  https://github.com/sephcodes66/churnPredicition_MLOps.git (fetch)
    origin  https://github.com/sephcodes66/churnPredicition_MLOps.git (push)
    ```

3.  **If you don't see the correct remote URL**, you can fix it with the following commands:
    ```bash
    # First, remove the incorrect remote (if it exists)
    git remote remove origin

    # Then, add the correct one
    git remote add origin https://github.com/sephcodes66/churnPredicition_MLOps.git
    ```

---
### Step 3: Verify Kaggle and Databricks Credentials
---

The project needs API credentials to download data from Kaggle and log experiments to MLflow (if using Databricks). The scripts are designed to find these automatically if they are in the correct place.

**For Kaggle:**

1.  The application looks for a file at `~/.kaggle/kaggle.json`.
2.  To check if it's set up correctly, you can list the file's contents:
    ```bash
    cat ~/.kaggle/kaggle.json
    ```
3.  This should display your Kaggle username and key. If it doesn't, or the file doesn't exist, follow the setup instructions in the `README.md` to create it.

**For Databricks (if used):**

1.  The application relies on the Databricks CLI being configured.
2.  To check if it's configured, run:
    ```bash
    databricks configure --host https://<your-databricks-workspace-url>
    ```
    *(You don't need to complete the configuration, just running this command will show you the currently configured host if it exists).*
3.  If it's not configured, you can set it up by running `databricks configure` and providing your Databricks host and personal access token as instructed in the `README.md`.
